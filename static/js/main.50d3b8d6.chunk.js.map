{"version":3,"sources":["logo.svg","../node_modules/peerjs/dist sync","main/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","localVideoStream","localStream","Main","props","state","peer","peerToConnect","connected","message","connection","webCamON","videoOn","audioOn","peerServerPath","port","handleClick","bind","updateUserPeerId","updateMessage","sendMessage","handleVideoToggle","handleAudioToggle","initPeerConnection","updatePeerServerPath","updatePort","path","window","location","href","console","log","Peer","RandonString","generate","host","this","on","conn","setState","data","send","call","answer","remoteStream","remoteVideo","srcObject","err","initLocalVideo","evt","target","value","navigator","mediaDevices","getUserMedia","video","audio","localVideo","connect","a","_id","type","onChange","name","onClick","ref","autoPlay","src","muted","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.50d3b8d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 113;","import React, { Component } from 'react'\nimport Peer from 'peerjs';\nimport RandonString from 'randomstring'\n\nlet localVideoStream;\nlet remoteStream;\nlet localStream;\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            peer: '',\n            peerToConnect: '',\n            connected: false,\n            message: '',\n            connection: null,\n            webCamON: false,\n            videoOn: true,\n            audioOn: false,\n            peerServerPath: '',\n            port: ''\n        }\n        this.handleClick = this.handleClick.bind(this);\n        this.updateUserPeerId = this.updateUserPeerId.bind(this);\n        this.updateMessage = this.updateMessage.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.handleVideoToggle = this.handleVideoToggle.bind(this);\n        this.handleAudioToggle = this.handleAudioToggle.bind(this);\n        this.initPeerConnection = this.initPeerConnection.bind(this);\n        this.updatePeerServerPath = this.updatePeerServerPath.bind(this);\n        this.updatePort = this.updatePort.bind(this);\n    }\n\n    componentDidMount() {\n        let path = window.location.href;\n        console.log(path);\n    }\n\n    async initPeerConnection() {\n        var peer = new Peer(RandonString.generate(), { host: this.state.peerServerPath, port: this.state.port, path: '/' });\n        peer.on('connection', (conn) => {\n            this.setState({ connection: conn });\n            conn.on('data', (data) => {\n                this.setState({ connection: conn });\n                console.log(data);\n                this.setState({ connected: true });\n            });\n            conn.on('open', () => {\n                //this.initRemoteVideo();\n                this.setState({ connection: conn });\n                conn.send('hello!');\n                this.setState({ connected: true });\n            });\n        });\n        peer.on('call', call => {\n            this.setState({ connected: true });\n            call.answer(localStream)\n            call.on('stream', remoteStream => {\n                this.remoteVideo.srcObject = remoteStream\n            })\n        })\n        peer.on('error', (err) => {\n            console.log(err);\n            this.setState({ connected: false });\n        });\n        await this.setState({ peer: peer });\n        this.initLocalVideo();\n    }\n\n    updatePeerServerPath(evt) {\n        this.setState({\n            peerServerPath: evt.target.value\n        })\n    }\n\n    updatePort(evt) {\n        this.setState({\n            port: evt.target.value\n        })\n    }\n\n    async initLocalVideo() {\n        if (this.state.videoOn || this.state.audioOn) {\n            localVideoStream = await navigator.mediaDevices.getUserMedia({\n                video: this.state.videoOn, audio: false\n            })\n            localStream = await navigator.mediaDevices.getUserMedia({\n                video: this.state.videoOn, audio: this.state.audioOn\n            })\n        } else {\n            localStream = null;\n            localVideoStream = null;\n        }\n        this.localVideo.srcObject = localVideoStream;\n        this.setState({ webCamON: true });\n    }\n\n    async handleVideoToggle() {\n        await this.setState({ videoOn: !this.state.videoOn });\n        this.initLocalVideo();\n    }\n\n    async handleAudioToggle() {\n        await this.setState({ audioOn: !this.state.audioOn });\n        this.initLocalVideo();\n    }\n\n    updateUserPeerId(evt) {\n        this.setState({\n            peerToConnect: evt.target.value\n        });\n    }\n\n    updateMessage(evt) {\n        this.setState({\n            message: evt.target.value\n        });\n    }\n\n    sendMessage() {\n        if (this.state.connected) {\n            let conn = this.state.connection;\n            conn.send(this.state.message);\n        }\n    }\n\n    handleClick() {\n        const peer = this.state.peer;\n        const conn = peer.connect(this.state.peerToConnect);\n        conn.on('open', () => {\n            //this.initRemoteVideo();\n            this.setState({ connection: conn });\n            conn.send('hi!');\n            this.setState({ connected: true });\n        });\n        conn.on('data', (data) => {\n            this.setState({ connection: conn });\n            console.log(data);\n            this.setState({ connected: true });\n        });\n        const call = peer.call(this.state.peerToConnect, localStream)\n        call.on('stream', async (remoteStream) => {\n            await this.setState({ connected: true });\n            this.remoteVideo.srcObject = remoteStream\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {!!this.state.peer ?\n                    (<div>\n                        <h1>Hello, {this.state.peer._id}</h1>\n                        <div>\n                            Enter Peer id to connect: <input type=\"text\" value={this.state.peerToConnect} onChange={this.updateUserPeerId} name=\"peerToConnect\"></input>\n                            <button onClick={this.handleClick}>Connect</button>\n                        </div>\n                        <br />\n                        <br />\n                        {this.state.connected ? (<div>\n                            Enter Message to send:<input type=\"text\" value={this.state.message} onChange={this.updateMessage} name=\"message\"></input>\n                            <button onClick={this.sendMessage}>Send</button>\n                        </div>) : ''}\n                        <video ref={localVideo => { this.localVideo = localVideo }} id=\"localVideo\" autoPlay src={localVideoStream}></video>\n                        <br />\n                        <div>\n                            <button onClick={this.handleVideoToggle}>Video {this.state.videoOn ? ' Off' : ' On'}</button>\n                            <button onClick={this.handleAudioToggle}>Audio {this.state.audioOn ? ' Off' : ' On'}</button>\n                        </div>\n                        {this.state.connected ? (<video id=\"remoteVideo\" ref={remoteVideo => { this.remoteVideo = remoteVideo }} autoPlay muted></video>) : ''}\n                    </div>) : (\n                        <div>\n                            Enter Peer Server path: <input type=\"text\" value={this.state.peerServerPath} onChange={this.updatePeerServerPath} name=\"peerServerPath\"></input><br />\n                            Enter Peer Port number:<input type=\"text\" value={this.state.port} onChange={this.updatePort} name=\"port\"></input><br />\n                            <button onClick={this.initPeerConnection}>Connect</button>\n                        </div>\n                    )}\n            </div>);\n    }\n}\n\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './main/main';\n\nfunction App() {\n    return (\n        <Main name=\"uk\" />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}